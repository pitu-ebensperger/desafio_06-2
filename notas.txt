**Setup Express**
1. Inicio Node JS y genero package.json: `npm init -y`
2. Instalo dependecias: `npm install express`
3. Creo archivo index.js con este código:
    ```
        const express = require('express')
        const app = express()
        app.listen(3000, console.log("¡Servidor encendido!"))
        app.get("/home", (req, res) => {
        res.send("Hello World Express Js")
        })
    ```

**Setup Express with ES6**

1. Inicio Node JS y genero package.json: `npm init -y`
2. Instalo dependecias: `npm install express` y `npm install nodemon -D`
3. Configuro *package.json* para ejecutar en dependencia nodemon y habilido módulos ES6:
    ```
    {
        "name": "...",
        "version": "1.0.0",
        "description": "...",
        "main": "index.js",
        "type": "module" //Habilita ES6
        "scripts": {
            "dev": "nodemon index.js",// Corre nodemon
            "start": "node index.js" // Corre node
            "test": "echo \"Error: no test specified\" && exit 1"
        },
        "keywords": [],
        "author": "",
        "license": "ISC"
        }
    ```
4. Creo archivo index.js con este código:
    ```
        import express from "express";
        const app = express();

        app.get("/", (req, res) => {
            res.json ({ message: "Hello World!"});
        });

        app.listen(5000, () => {
            console.log("Example app listening port 5000");
        });
        ```

5. Levanto servidor con `npm run dev`

------------

**Operador spread ...**
'...objeto' copia todas las propiedades de un objeto dentro de otro.

**Códigos HTTP**
- res.status(404) = no encontrado / not found
- res.status(400) = validacion / not valid
- res.status(200) = OK
- res.status(201) = creado.


**id**

const index = canciones.findIndex(p => p.id == idNum)


**findIndex** 
Método de arrays en JavaScript que busca el índice (posición) del primer elemento que cumpla con una condición dada (callback). Si no encuentra ningún elemento que cumpla la condición, devuelve -1.

La función flecha p => p.id == idNum
*p es cada objeto dentro del array mientras se itera.




Según el tipo de dato o el formato que necesites, puedes nombrar la variable así:

xNum → Number(x) → la propiedad x convertida a Number (parseInt, Number()).
xString → String(x) o x.toString() → la propiedad x convertida a String (String(valor), .toString()).
xBool → Boolean(x) o !!x → la propiedad x convertida a Boolean (Boolean(valor) o !!valor).
xDate → new Date(x) → la propiedad x convertida a Date (new Date(valor)).
xObj → JSON.parse(x) → la propiedad x tratada como objeto (ej: JSON.parse(valor)).
xArr → x.split(",") → la propiedad x tratada como array (Array.isArray(valor) o split).
xJSON → JSON.stringify(x) → la propiedad x guardada en formato JSON (JSON.stringify).
xRaw → valor crudo tal como viene (sin convertir).
xNormalized → x.trim().toLowerCase() → valor procesado para ser consistente (ej: todo minúsculas, sin espacios).
xFormatted → x.toLocaleString("es-CL") → valor formateado para mostrar en UI (ej: teléfono con guiones).